package io.swagger.model;

import java.util.Objects;

import javax.validation.Valid;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Parameters for authentication/authorization using OAUTH2_CLIENT_CREDENTIALS. Shall be present if authType is \&quot;OAUTH2_CLIENT_CREDENTIALS\&quot; and the contained information has not been provisioned out of band. Shall be absent otherwise.
 **/
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

@ApiModel(description = "Parameters for authentication/authorization using OAUTH2_CLIENT_CREDENTIALS. Shall be present if authType is \"OAUTH2_CLIENT_CREDENTIALS\" and the contained information has not been provisioned out of band. Shall be absent otherwise. ")

public class SubscriptionsAuthenticationParamsOauth2ClientCredentials {

	private @Valid String clientId = null;
	private @Valid String clientPassword = null;
	private @Valid String tokenEndpoint = null;

	/**
	 * Client identifier to be used in the access token request of the OAuth 2.0
	 * client credentials grant type. Shall be present if it has not been
	 * provisioned out of band. The clientId and clientPassword passed in a
	 * subscription shall not be the same as the clientId and clientPassword that
	 * are used to obtain authorization for API requests. Client credentials may
	 * differ between subscriptions. The value of clientPassword should be generated
	 * by a random process.
	 **/
	public SubscriptionsAuthenticationParamsOauth2ClientCredentials clientId(String clientId) {
		this.clientId = clientId;
		return this;
	}

	@ApiModelProperty(value = "Client identifier to be used in the access token request of the OAuth 2.0 client credentials grant type.  Shall be present if it has not been provisioned out of band. The clientId and clientPassword passed in a subscription shall not be the same as the clientId and clientPassword that are used to obtain authorization for API requests. Client credentials may differ between subscriptions. The value of clientPassword should be generated by a random process. ")
	@JsonProperty("clientId")
	public String getClientId() {
		return clientId;
	}

	public void setClientId(String clientId) {
		this.clientId = clientId;
	}

	/**
	 * Client password to be used in the access token request of the OAuth 2.0
	 * client credentials grant type. Shall be present if it has not been
	 * provisioned out of band. The clientId and clientPassword passed in a
	 * subscription shall not be the same as the clientId and clientPassword that
	 * are used to obtain authorization for API requests. Client credentials may
	 * differ between subscriptions. The value of clientPassword should be generated
	 * by a random process.
	 **/
	public SubscriptionsAuthenticationParamsOauth2ClientCredentials clientPassword(String clientPassword) {
		this.clientPassword = clientPassword;
		return this;
	}

	@ApiModelProperty(value = "Client password to be used in the access token request of the OAuth 2.0 client credentials grant type.  Shall be present if it has not been provisioned out of band. The clientId and clientPassword passed in a subscription shall not be the same as the clientId and clientPassword that are used to obtain authorization for API requests. Client credentials may differ between subscriptions. The value of clientPassword should be generated by a random process. ")
	@JsonProperty("clientPassword")
	public String getClientPassword() {
		return clientPassword;
	}

	public void setClientPassword(String clientPassword) {
		this.clientPassword = clientPassword;
	}

	/**
	 * String formatted according to IETF RFC 3986.
	 **/
	public SubscriptionsAuthenticationParamsOauth2ClientCredentials tokenEndpoint(String tokenEndpoint) {
		this.tokenEndpoint = tokenEndpoint;
		return this;
	}

	@ApiModelProperty(value = "String formatted according to IETF RFC 3986. ")
	@JsonProperty("tokenEndpoint")
	public String getTokenEndpoint() {
		return tokenEndpoint;
	}

	public void setTokenEndpoint(String tokenEndpoint) {
		this.tokenEndpoint = tokenEndpoint;
	}

	@Override
	public boolean equals(java.lang.Object o) {
		if (this == o) {
			return true;
		}
		if ((o == null) || (getClass() != o.getClass())) {
			return false;
		}
		final SubscriptionsAuthenticationParamsOauth2ClientCredentials subscriptionsAuthenticationParamsOauth2ClientCredentials = (SubscriptionsAuthenticationParamsOauth2ClientCredentials) o;
		return Objects.equals(clientId, subscriptionsAuthenticationParamsOauth2ClientCredentials.clientId) &&
				Objects.equals(clientPassword, subscriptionsAuthenticationParamsOauth2ClientCredentials.clientPassword) &&
				Objects.equals(tokenEndpoint, subscriptionsAuthenticationParamsOauth2ClientCredentials.tokenEndpoint);
	}

	@Override
	public int hashCode() {
		return Objects.hash(clientId, clientPassword, tokenEndpoint);
	}

	@Override
	public String toString() {
		final StringBuilder sb = new StringBuilder();
		sb.append("class SubscriptionsAuthenticationParamsOauth2ClientCredentials {\n");

		sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
		sb.append("    clientPassword: ").append(toIndentedString(clientPassword)).append("\n");
		sb.append("    tokenEndpoint: ").append(toIndentedString(tokenEndpoint)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(java.lang.Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}
}
