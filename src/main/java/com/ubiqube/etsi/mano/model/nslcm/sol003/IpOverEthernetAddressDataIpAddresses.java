/*
 * SOL003 - VNF Lifecycle Management interface
 * SOL003 - VNF Lifecycle Management interface definition  IMPORTANT: Please note that this file might be not aligned to the current version of the ETSI Group Specification it refers to. In case of discrepancies the published ETSI Group Specification takes precedence.  In clause 4.3.2 of ETSI GS NFV-SOL 003 v2.4.1, an attribute-based filtering mechanism is defined. This mechanism is currently not included in the corresponding OpenAPI design for this GS version. Changes to the attribute-based filtering mechanism are being considered in v2.5.1 of this GS for inclusion in the corresponding future ETSI NFV OpenAPI design. Please report bugs to https://forge.etsi.org/bugzilla/buglist.cgi?component=Nfv-Openapis&list_id=61&product=NFV&resolution=
 *
 * OpenAPI spec version: 1.1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.ubiqube.etsi.mano.model.nslcm.sol003;

import java.util.ArrayList;
import java.util.List;

import javax.validation.constraints.NotNull;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;

import io.swagger.annotations.ApiModelProperty;

/**
 * IpOverEthernetAddressDataIpAddresses
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaJerseyServerCodegen", date = "2019-06-13T10:04:39.223+02:00")
public class IpOverEthernetAddressDataIpAddresses {
	/**
	 * The type of the IP addresses. Permitted values: IPV4, IPV6.
	 */
	public enum TypeEnum {
		IPV4("IPV4"),

		IPV6("IPV6");

		private final String value;

		TypeEnum(String value) {
			this.value = value;
		}

		@Override
		@JsonValue
		public String toString() {
			return String.valueOf(value);
		}

		@JsonCreator
		public static TypeEnum fromValue(String text) {
			for (final TypeEnum b : TypeEnum.values()) {
				if (String.valueOf(b.value).equals(text)) {
					return b;
				}
			}
			return null;
		}
	}

	@JsonProperty("type")
	private TypeEnum type = null;

	@JsonProperty("fixedAddresses")
	private List<String> fixedAddresses = null;

	@JsonProperty("numDynamicAddresses")
	private Integer numDynamicAddresses = null;

	@JsonProperty("addressRange")
	private IpOverEthernetAddressDataAddressRange addressRange = null;

	@JsonProperty("subnetId")
	private String subnetId = null;

	public IpOverEthernetAddressDataIpAddresses type(TypeEnum type) {
		this.type = type;
		return this;
	}

	/**
	 * The type of the IP addresses. Permitted values: IPV4, IPV6.
	 * 
	 * @return type
	 **/
	@JsonProperty("type")
	@ApiModelProperty(required = true, value = "The type of the IP addresses. Permitted values: IPV4, IPV6. ")
	@NotNull
	public TypeEnum getType() {
		return type;
	}

	public void setType(TypeEnum type) {
		this.type = type;
	}

	public IpOverEthernetAddressDataIpAddresses fixedAddresses(List<String> fixedAddresses) {
		this.fixedAddresses = fixedAddresses;
		return this;
	}

	public IpOverEthernetAddressDataIpAddresses addFixedAddressesItem(String fixedAddressesItem) {
		if (this.fixedAddresses == null) {
			this.fixedAddresses = new ArrayList<String>();
		}
		this.fixedAddresses.add(fixedAddressesItem);
		return this;
	}

	/**
	 * Fixed addresses to assign (from the subnet defined by \&quot;subnetId\&quot;
	 * if provided). Exactly one of \&quot;fixedAddresses\&quot;,
	 * \&quot;numDynamicAddresses\&quot; or \&quot;ipAddressRange\&quot; shall be
	 * present.
	 * 
	 * @return fixedAddresses
	 **/
	@JsonProperty("fixedAddresses")
	@ApiModelProperty(value = "Fixed addresses to assign (from the subnet defined by \"subnetId\" if provided). Exactly one of \"fixedAddresses\", \"numDynamicAddresses\" or \"ipAddressRange\" shall be present. ")
	public List<String> getFixedAddresses() {
		return fixedAddresses;
	}

	public void setFixedAddresses(List<String> fixedAddresses) {
		this.fixedAddresses = fixedAddresses;
	}

	public IpOverEthernetAddressDataIpAddresses numDynamicAddresses(Integer numDynamicAddresses) {
		this.numDynamicAddresses = numDynamicAddresses;
		return this;
	}

	/**
	 * Number of dynamic addresses to assign (from the subnet defined by
	 * \&quot;subnetId\&quot; if provided). Exactly one of
	 * \&quot;fixedAddresses\&quot;, \&quot;numDynamicAddresses\&quot; or
	 * \&quot;ipAddressRange\&quot; shall be present.
	 * 
	 * @return numDynamicAddresses
	 **/
	@JsonProperty("numDynamicAddresses")
	@ApiModelProperty(value = "Number of dynamic addresses to assign (from the subnet defined by \"subnetId\" if provided). Exactly one of \"fixedAddresses\", \"numDynamicAddresses\" or \"ipAddressRange\" shall be present. ")
	public Integer getNumDynamicAddresses() {
		return numDynamicAddresses;
	}

	public void setNumDynamicAddresses(Integer numDynamicAddresses) {
		this.numDynamicAddresses = numDynamicAddresses;
	}

	public IpOverEthernetAddressDataIpAddresses addressRange(IpOverEthernetAddressDataAddressRange addressRange) {
		this.addressRange = addressRange;
		return this;
	}

	/**
	 * Get addressRange
	 * 
	 * @return addressRange
	 **/
	@JsonProperty("addressRange")
	@ApiModelProperty(value = "")
	public IpOverEthernetAddressDataAddressRange getAddressRange() {
		return addressRange;
	}

	public void setAddressRange(IpOverEthernetAddressDataAddressRange addressRange) {
		this.addressRange = addressRange;
	}

	public IpOverEthernetAddressDataIpAddresses subnetId(String subnetId) {
		this.subnetId = subnetId;
		return this;
	}

	/**
	 * Subnet defined by the identifier of the subnet resource in the VIM. In case
	 * this attribute is present, IP addresses from that subnet will be assigned;
	 * otherwise, IP addresses not bound to a subnet will be assigned.
	 * 
	 * @return subnetId
	 **/
	@JsonProperty("subnetId")
	@ApiModelProperty(value = "Subnet defined by the identifier of the subnet resource in the VIM. In case this attribute is present, IP addresses from that subnet will be assigned; otherwise, IP addresses not bound to a subnet will be assigned. ")
	public String getSubnetId() {
		return subnetId;
	}

	public void setSubnetId(String subnetId) {
		this.subnetId = subnetId;
	}

	@Override
	public String toString() {
		final StringBuilder sb = new StringBuilder();
		sb.append("class IpOverEthernetAddressDataIpAddresses {\n");

		sb.append("    type: ").append(toIndentedString(type)).append("\n");
		sb.append("    fixedAddresses: ").append(toIndentedString(fixedAddresses)).append("\n");
		sb.append("    numDynamicAddresses: ").append(toIndentedString(numDynamicAddresses)).append("\n");
		sb.append("    addressRange: ").append(toIndentedString(addressRange)).append("\n");
		sb.append("    subnetId: ").append(toIndentedString(subnetId)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(java.lang.Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}
}
