/*
 * SOL003 - VNF Lifecycle Management interface
 * SOL003 - VNF Lifecycle Management interface definition  IMPORTANT: Please note that this file might be not aligned to the current version of the ETSI Group Specification it refers to. In case of discrepancies the published ETSI Group Specification takes precedence.  In clause 4.3.2 of ETSI GS NFV-SOL 003 v2.4.1, an attribute-based filtering mechanism is defined. This mechanism is currently not included in the corresponding OpenAPI design for this GS version. Changes to the attribute-based filtering mechanism are being considered in v2.5.1 of this GS for inclusion in the corresponding future ETSI NFV OpenAPI design. Please report bugs to https://forge.etsi.org/bugzilla/buglist.cgi?component=Nfv-Openapis&list_id=61&product=NFV&resolution=
 *
 * OpenAPI spec version: 1.1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.ubiqube.etsi.mano.model.nslcm.sol003;

import java.util.ArrayList;
import java.util.List;

import com.fasterxml.jackson.annotation.JsonProperty;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * This type represents an externally provided link port or network address
 * information per instance of an external connection point. In case a link port
 * is provided, the VNFM shall use that link port when connecting the external
 * CP to the external VL. In a link port is not provided, the VNFM shall create
 * a link port on the external VL, and use that link port to connect the
 * external CP to the external VL.
 */
@ApiModel(description = "This type represents an externally provided link port or network address information per instance of an external connection point. In case a link port is provided, the VNFM shall use that link port when connecting the external CP to the external VL. In a link port is not provided, the VNFM shall create a link port on the external VL, and use that link port to connect the external CP to the external VL. ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaJerseyServerCodegen", date = "2019-06-13T10:04:39.223+02:00")
public class VnfExtCpConfig {
	@JsonProperty("cpInstanceId")
	private String cpInstanceId = null;

	@JsonProperty("linkPortId")
	private String linkPortId = null;

	@JsonProperty("cpProtocolData")
	private List<CpProtocolData> cpProtocolData = null;

	public VnfExtCpConfig cpInstanceId(String cpInstanceId) {
		this.cpInstanceId = cpInstanceId;
		return this;
	}

	/**
	 * Identifier of the external CP instance to which this set of configuration
	 * parameters is requested to be applied. Shall be present if this instance has
	 * already been created.
	 * 
	 * @return cpInstanceId
	 **/
	@JsonProperty("cpInstanceId")
	@ApiModelProperty(value = "Identifier of the external CP instance to which this set of configuration parameters is requested to be applied.  Shall be present if this instance has already been created. ")
	public String getCpInstanceId() {
		return cpInstanceId;
	}

	public void setCpInstanceId(String cpInstanceId) {
		this.cpInstanceId = cpInstanceId;
	}

	public VnfExtCpConfig linkPortId(String linkPortId) {
		this.linkPortId = linkPortId;
		return this;
	}

	/**
	 * Identifier of a pre-configured link port to which the external CP will be
	 * associated. The following conditions apply to the attributes
	 * \&quot;linkPortId\&quot; and \&quot;cpProtocolData\&quot;: * The
	 * \&quot;linkPortId\&quot; and \&quot;cpProtocolData\&quot; attributes shall
	 * both be absent for the deletion of an existing external CP instance addressed
	 * by cpInstanceId. * At least one of these attributes shall be present for a
	 * to-be-created external CP instance or an existing external CP instance. * If
	 * the \&quot;linkPortId\&quot; attribute is absent, the VNFM shall create a
	 * link port. * If the \&quot;cpProtocolData\&quot; attribute is absent, the
	 * \&quot;linkPortId\&quot; attribute shall be provided referencing a
	 * pre-created link port, and the VNFM can use means outside the scope of the
	 * present document to obtain the pre-configured address information for the
	 * connection point from the resource representing the link port. * If both
	 * \&quot;cpProtocolData\&quot; and \&quot;linkportId\&quot; are provided, the
	 * API consumer shall ensure that the cpProtocolData can be used with the
	 * pre-created link port referenced by \&quot;linkPortId\&quot;.
	 * 
	 * @return linkPortId
	 **/
	@JsonProperty("linkPortId")
	@ApiModelProperty(value = "Identifier of a pre-configured link port to which the external CP will be associated. The following conditions apply to the attributes \"linkPortId\" and \"cpProtocolData\":  * The \"linkPortId\" and \"cpProtocolData\" attributes shall both be   absent for the deletion of an existing external CP instance   addressed by cpInstanceId.  * At least one of these attributes shall be present for a   to-be-created external CP instance or an existing external   CP instance. * If the \"linkPortId\" attribute is absent, the VNFM shall create a   link port. * If the \"cpProtocolData\" attribute is absent, the \"linkPortId\"   attribute shall be provided referencing a pre-created link port,   and the VNFM can use means outside the scope of the present   document to obtain the pre-configured address information for the   connection point from the resource representing the link port. * If both \"cpProtocolData\" and \"linkportId\" are provided, the API   consumer shall ensure that the cpProtocolData can be used with the   pre-created link port referenced by \"linkPortId\". ")
	public String getLinkPortId() {
		return linkPortId;
	}

	public void setLinkPortId(String linkPortId) {
		this.linkPortId = linkPortId;
	}

	public VnfExtCpConfig cpProtocolData(List<CpProtocolData> cpProtocolData) {
		this.cpProtocolData = cpProtocolData;
		return this;
	}

	public VnfExtCpConfig addCpProtocolDataItem(CpProtocolData cpProtocolDataItem) {
		if (this.cpProtocolData == null) {
			this.cpProtocolData = new ArrayList<CpProtocolData>();
		}
		this.cpProtocolData.add(cpProtocolDataItem);
		return this;
	}

	/**
	 * Parameters for configuring the network protocols on the link port that
	 * connects the CP to a VL. The following conditions apply to the attributes
	 * \&quot;linkPortId\&quot; and \&quot;cpProtocolData\&quot;: * The
	 * \&quot;linkPortId\&quot; and \&quot;cpProtocolData\&quot; attributes shall
	 * both be absent for the deletion of an existing external CP instance addressed
	 * by cpInstanceId. * At least one of these attributes shall be present for a
	 * to-be-created external CP instance or an existing external CP instance. * If
	 * the \&quot;linkPortId\&quot; attribute is absent, the VNFM shall create a
	 * link port. * If the \&quot;cpProtocolData\&quot; attribute is absent, the
	 * \&quot;linkPortId\&quot; attribute shall be provided referencing a
	 * pre-created link port, and the VNFM can use means outside the scope of the
	 * present document to obtain the pre-configured address information for the
	 * connection point from the resource representing the link port. * If both
	 * \&quot;cpProtocolData\&quot; and \&quot;linkportId\&quot; are provided, the
	 * API consumer shall ensure that the cpProtocolData can be used with the
	 * pre-created link port referenced by \&quot;linkPortId\&quot;.
	 * 
	 * @return cpProtocolData
	 **/
	@JsonProperty("cpProtocolData")
	@ApiModelProperty(value = "Parameters for configuring the network protocols on the link port that connects the CP to a VL.  The following conditions apply to the attributes \"linkPortId\" and \"cpProtocolData\":  * The \"linkPortId\" and \"cpProtocolData\" attributes shall both be   absent for the deletion of an existing external CP instance   addressed by cpInstanceId.  * At least one of these attributes shall be present for a   to-be-created external CP instance or an existing external   CP instance. * If the \"linkPortId\" attribute is absent, the VNFM shall create a   link port. * If the \"cpProtocolData\" attribute is absent, the \"linkPortId\"   attribute shall be provided referencing a pre-created link port,   and the VNFM can use means outside the scope of the present   document to obtain the pre-configured address information for the   connection point from the resource representing the link port. * If both \"cpProtocolData\" and \"linkportId\" are provided, the API   consumer shall ensure that the cpProtocolData can be used with the   pre-created link port referenced by \"linkPortId\". ")
	public List<CpProtocolData> getCpProtocolData() {
		return cpProtocolData;
	}

	public void setCpProtocolData(List<CpProtocolData> cpProtocolData) {
		this.cpProtocolData = cpProtocolData;
	}

	@Override
	public String toString() {
		final StringBuilder sb = new StringBuilder();
		sb.append("class VnfExtCpConfig {\n");

		sb.append("    cpInstanceId: ").append(toIndentedString(cpInstanceId)).append("\n");
		sb.append("    linkPortId: ").append(toIndentedString(linkPortId)).append("\n");
		sb.append("    cpProtocolData: ").append(toIndentedString(cpProtocolData)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(java.lang.Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}
}
